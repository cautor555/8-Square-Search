Main allows user to select algorithm options, receive inputs and outputs data

8Square class:
  Constructor to make a new randomly arranged 8-square
  8-Square represented as an array



  BFS:

  Goal 1: 1,2,3,4,5,6,7,8,0
  Goal 2: 1,2,3,8,0,4,7,6,5



  Start example: 3 6 5
                 4 0 8
                 7 2 1

  Identify parity
  3: 2
  6: 4
  5: 3
  4: 2
  0: NA
  8: 3
  7: 2
  2: 1
  1: 0

  P = ODD
  Goal = Goal2

  Tree

  Identify location of 0

  Observation: 0 can only swap with tiles 1 away and 3 away in array (if valid location exists 3 away)

  4 choices in the middle
  3 choices on the edge
  2 choices in the corner




A*

h1 heuristic

while current node is not target
  explore each child (2-4)
  compare nodes
  set current node as node with the lowest h(n) cost calculated by adding up inversions

h2 heuristic

while current node is not target
  explore each child (2-4)
  compare nodes
  set current node as node with the lowest h(n) cost calculated by adding up Manhattan distance

Manhattan distance calculation: need to modify*

count -> 0
for i in current node
  for j in target
    if node@i == target@j
      count += |i-j|
